class AudioVisualizer extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=this.shadowRoot;t.innerHTML='\n        <style>\n            @import url(\'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\');\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                width: 100vw;\n                height: 100vh;\n                background-color: #000;\n            }\n            canvas {\n                width: 100%;\n                height: 100%;\n            }\n            .audio-control {\n                position: absolute;\n                bottom: 40px;\n                left: 50%;\n                transform: translateX(-50%);\n                cursor: pointer;\n                font-size: 42px;\n                z-index: 9999;\n                color: #fff;\n            }\n            .footer--attribute {\n                text-align: center;\n                padding: 5px 10px;\n                position: fixed;\n                width: 100%;\n                bottom: 0;\n                color: #fff;\n                left: 0;\n                z-index: 999;\n                font-size: 0.75rem;\n                background-color: transparent;\n            }\n        </style>\n        <i id="audio-control" class="fas fa-play audio-control"></i>\n        <canvas></canvas>\n        <div class="footer--attribute">\n          <p id="attribution-text"></p>\n        </div>\n      ',this.canvas=t.querySelector("canvas"),this.audioControl=t.querySelector("#audio-control"),this.attributionText=t.querySelector("#attribution-text"),this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2048,this.dataArray=new Uint8Array(this.analyser.frequencyBinCount),this.isPlaying=!1,this.resizeObserver=new ResizeObserver((()=>this.resizeCanvas()))}connectedCallback(){const t=this.getAttribute("audio-src"),e=this.getAttribute("attribution-text"),i=this.getAttribute("fragment-shader");t&&this.loadAudio(t),e&&(this.attributionText.textContent=e),this.initAudioControl(),this.initWebGL(i),this.resizeObserver.observe(this.canvas),this.resizeCanvas()}async loadAudio(t){const e=await fetch(t),i=await e.arrayBuffer();this.audioBuffer=await this.audioContext.decodeAudioData(i)}resize(t){const e=window.devicePixelRatio||1,i=Math.floor(t.clientWidth*e),o=Math.floor(t.clientHeight*e);t.width===i&&t.height===o||(t.width=i,t.height=o)}resizeCanvas(){this.resize(this.canvas)}initWebGL(t){const e=this.canvas.getContext("webgl2");if(!e)return void console.error("WebGL2 not supported");const i=t||"#version 300 es\n            precision mediump float;\n            in vec2 v_texCoord;\n            uniform sampler2D u_texture;\n            uniform vec2 u_resolution;\n            out vec4 outColor;\n\n            void main() {\n                float value = texture(u_texture, vec2(v_texCoord.x, 0.5)).r;\n                float y = (value - 0.5) * u_resolution.y + (u_resolution.y / 2.0);\n                if (abs(gl_FragCoord.y - y) < 1.0) {\n                    outColor = vec4(0.0, 1.0, 0.0, 1.0);\n                } else {\n                    outColor = vec4(0.0, 0.0, 0.0, 1.0);\n                }\n            }\n        ",o=this.createShader(e,e.VERTEX_SHADER,"#version 300 es\n            in vec4 a_position;\n            out vec2 v_texCoord;\n            void main() {\n                gl_Position = a_position;\n                v_texCoord = a_position.xy * 0.5 + 0.5;\n            }\n        "),r=this.createShader(e,e.FRAGMENT_SHADER,i),a=this.createProgram(e,o,r),n=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,n);const s=new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]);e.bufferData(e.ARRAY_BUFFER,s,e.STATIC_DRAW);const c=e.createVertexArray();e.bindVertexArray(c);const u=e.getAttribLocation(a,"a_position");e.enableVertexAttribArray(u),e.vertexAttribPointer(u,2,e.FLOAT,!1,0,0);const h=e.createTexture();e.bindTexture(e.TEXTURE_2D,h),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),this.gl=e,this.program=a,this.positionBuffer=n,this.vao=c,this.texture=h,this.resolutionUniformLocation=e.getUniformLocation(a,"u_resolution")}createShader(t,e,i){const o=t.createShader(e);return t.shaderSource(o,i),t.compileShader(o),t.getShaderParameter(o,t.COMPILE_STATUS)?o:(console.error("Shader compilation failed:",t.getShaderInfoLog(o)),t.deleteShader(o),null)}createProgram(t,e,i){const o=t.createProgram();return t.attachShader(o,e),t.attachShader(o,i),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS)?o:(console.error("Program linking failed:",t.getProgramInfoLog(o)),t.deleteProgram(o),null)}renderWaveform(){this.analyser.getByteTimeDomainData(this.dataArray);const t=this.gl,e=this.program;t.bindTexture(t.TEXTURE_2D,this.texture),t.texImage2D(t.TEXTURE_2D,0,t.LUMINANCE,this.dataArray.length,1,0,t.LUMINANCE,t.UNSIGNED_BYTE,this.dataArray),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.useProgram(e),t.uniform2f(this.resolutionUniformLocation,t.canvas.width,t.canvas.height),t.bindVertexArray(this.vao),t.drawArrays(t.TRIANGLES,0,6),this.isPlaying&&requestAnimationFrame((()=>this.renderWaveform()))}initAudioControl(){this.audioControl.addEventListener("click",(()=>{this.isPlaying?this.stopAudio():this.playAudio()}))}playAudio(){this.source=this.audioContext.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.connect(this.analyser),this.analyser.connect(this.audioContext.destination),this.source.start(0),this.isPlaying=!0,this.audioControl.classList.remove("fa-play"),this.audioControl.classList.add("fa-pause"),this.renderWaveform()}stopAudio(){this.source&&(this.source.stop(),this.source.disconnect()),this.isPlaying=!1,this.audioControl.classList.remove("fa-pause"),this.audioControl.classList.add("fa-play")}}customElements.define("mm-audio-visualizer",AudioVisualizer);