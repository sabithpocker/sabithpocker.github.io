class AudioVisualizer extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=this.shadowRoot;t.innerHTML='\n        <style>\n            @import url(\'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\');\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                width: 100vw;\n                height: 100vh;\n                background-color: #000;\n            }\n            canvas {\n                width: 100%;\n                height: 100%;\n            }\n            .audio-control {\n                position: absolute;\n                bottom: 40px;\n                left: 50%;\n                transform: translateX(-50%);\n                cursor: pointer;\n                font-size: 42px;\n                z-index: 9999;\n                color: #fff;\n            }\n            .footer--attribute {\n                text-align: center;\n                padding: 5px 10px;\n                position: fixed;\n                width: 100%;\n                bottom: 0;\n                color: #fff;\n                left: 0;\n                z-index: 999;\n                font-size: 0.75rem;\n                background-color: transparent;\n            }\n        </style>\n        <i id="audio-control" class="fas fa-play audio-control"></i>\n        <canvas></canvas>\n        <div class="footer--attribute">\n          <p id="attribution-text"></p>\n        </div>\n      ',this.canvas=t.querySelector("canvas"),this.audioControl=t.querySelector("#audio-control"),this.attributionText=t.querySelector("#attribution-text"),this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.analyser=this.audioContext.createAnalyser(),this.dataArray=new Uint8Array(this.analyser.fftSize),this.isPlaying=!1,this.resizeObserver=new ResizeObserver((()=>this.resizeCanvas()))}connectedCallback(){const t=this.getAttribute("audio-src"),i=this.getAttribute("attribution-text");t&&this.loadAudio(t),i&&(this.attributionText.textContent=i),this.initAudioControl(),this.resizeObserver.observe(this.canvas),this.resizeCanvas()}async loadAudio(t){const i=await fetch(t),e=await i.arrayBuffer();this.audioBuffer=await this.audioContext.decodeAudioData(e)}resizeCanvas(){this.resize(this.canvas)}resize(t){const i=window.devicePixelRatio||1,e=Math.floor(t.clientWidth*i),s=Math.floor(t.clientHeight*i);t.width===e&&t.height===s||(t.width=e,t.height=s)}renderWaveform(){const t=this.canvas.getContext("2d");this.analyser.getByteTimeDomainData(this.dataArray),t.clearRect(0,0,this.canvas.width,this.canvas.height),t.lineWidth=2,t.strokeStyle="rgb(0, 255, 0)",t.beginPath();const i=this.canvas.width/this.dataArray.length;let e=0;for(let s=0;s<this.dataArray.length;s++){const a=this.dataArray[s]/128*this.canvas.height/2;0===s?t.moveTo(e,a):t.lineTo(e,a),e+=i}t.lineTo(this.canvas.width,this.canvas.height/2),t.stroke(),this.isPlaying&&requestAnimationFrame((()=>this.renderWaveform()))}initAudioControl(){this.audioControl.addEventListener("click",(()=>{this.isPlaying?this.stopAudio():this.playAudio()}))}playAudio(){this.source=this.audioContext.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.connect(this.analyser),this.analyser.connect(this.audioContext.destination),this.source.start(0),this.isPlaying=!0,this.audioControl.classList.remove("fa-play"),this.audioControl.classList.add("fa-pause"),this.renderWaveform()}stopAudio(){this.source&&(this.source.stop(),this.source.disconnect()),this.isPlaying=!1,this.audioControl.classList.remove("fa-pause"),this.audioControl.classList.add("fa-play")}}customElements.define("mm-audio-visualizer",AudioVisualizer);