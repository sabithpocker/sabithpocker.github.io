class AlhambraTiled extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n          <canvas data-canvas></canvas>\n          <style>\n          :host {\n            display: grid;\n          }\n          canvas {\n            width: 100%;\n            min-height: 100%;\n          }\n          </style>",this.canvas=this.shadowRoot.querySelector("canvas"),this.gl=this.canvas.getContext("webgl2"),this.gl?(this.textureCanvas=document.createElement("canvas"),this.textureCanvas.width=2048,this.textureCanvas.height=2048,this.textureCtx=this.textureCanvas.getContext("2d"),this.initializeTexture(),this.initializeWebGL(),this.updateCanvasSize(),this.render()):console.error("WebGL2 not supported")}generateTilePattern(){const e=this.textureCtx,t=this.textureCanvas.width,i=this.textureCanvas.height,r=t/2,a=i/2;e.fillStyle="#1a1324",e.fillRect(0,0,t,i),e.strokeStyle="rgba(255, 255, 255, 0.3)",e.lineWidth=2,e.beginPath(),e.moveTo(0,0),e.lineTo(t,i),e.moveTo(t,0),e.lineTo(0,i),e.moveTo(r,0),e.lineTo(r,i),e.moveTo(0,a),e.lineTo(t,a);const o=Math.tan(22.5*Math.PI/180);Math.tan(67.5*Math.PI/180);e.moveTo(0,a-r*o),e.lineTo(t,a+r*o),e.moveTo(0,a+r*o),e.lineTo(t,a-r*o),e.moveTo(r-a*o,0),e.lineTo(r+a*o,i),e.moveTo(r+a*o,0),e.lineTo(r-a*o,i),e.stroke(),e.beginPath(),e.rect(0,0,t,i),e.stroke();const n=Math.min(t,i)/2;e.beginPath(),e.arc(r,a,n,0,2*Math.PI),e.stroke();const s=t*Math.sqrt(2)/8;e.beginPath(),e.arc(r,a,s,0,2*Math.PI),e.stroke();const h=s*Math.sqrt(2),c=h/2;e.beginPath(),e.rect(r-c,a-c,h,h),e.stroke(),e.beginPath(),e.save(),e.translate(r,a),e.rotate(Math.PI/4),e.rect(-c,-c,h,h),e.restore(),e.stroke();const d=t*Math.sqrt(2)/2-n;e.beginPath(),e.arc(0,0,d,0,Math.PI/2),e.stroke(),e.beginPath(),e.arc(t,0,d,Math.PI/2,Math.PI),e.stroke(),e.beginPath(),e.arc(t,i,d,Math.PI,3*Math.PI/2),e.stroke(),e.beginPath(),e.arc(0,i,d,3*Math.PI/2,2*Math.PI),e.stroke(),e.beginPath();const l=d/Math.sqrt(2);function u(e,t,i,r,a,o){const n=i-e,s=r-t,h=s/n;let c,d;return n>0?(c=a,d=t+h*(a-e)):(c=0,d=t+h*(0-e)),(d<0||d>o)&&(d=s>0?o:0,c=e+(d-t)/h),[c,d]}[{mid1:[0,a],mid2:[r,0],intersect:[l,l]},{mid1:[t,a],mid2:[r,0],intersect:[t-l,l]},{mid1:[t,a],mid2:[r,i],intersect:[t-l,i-l]},{mid1:[0,a],mid2:[r,i],intersect:[l,i-l]}].forEach((r=>{let[a,o]=u(r.mid1[0],r.mid1[1],r.intersect[0],r.intersect[1],t,i);e.moveTo(r.mid1[0],r.mid1[1]),e.lineTo(a,o);let[n,s]=u(r.mid2[0],r.mid2[1],r.intersect[0],r.intersect[1],t,i);e.moveTo(r.mid2[0],r.mid2[1]),e.lineTo(n,s)})),e.stroke()}initializeTexture(){this.generateTilePattern();const e=this.gl;this.texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.textureCanvas)}get vertexShaderSource(){return"#version 300 es\n        in vec4 a_position;\n        in vec2 a_texCoord;\n        uniform vec2 u_resolution;\n        out vec2 v_texCoord;\n        \n        void main() {\n            vec2 zeroToOne = a_position.xy / u_resolution;\n            vec2 clipSpace = (zeroToOne * 2.0 - 1.0) * vec2(1, -1);\n            gl_Position = vec4(clipSpace, 0, 1);\n            v_texCoord = a_texCoord;\n        }"}get fragmentShaderSource(){return"#version 300 es\n        precision highp float;\n        \n        in vec2 v_texCoord;\n        uniform sampler2D u_texture;\n        uniform vec2 u_resolution;\n        out vec4 outColor;\n        \n        void main() {\n            vec2 repeat = u_resolution / 1024.0;  // 512 is texture size\n            vec2 texCoord = fract(v_texCoord * repeat);\n            outColor = texture(u_texture, texCoord);\n        }"}createShader(e,t,i){const r=e.createShader(t);return e.shaderSource(r,i),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS)?r:(console.error(e.getShaderInfoLog(r)),e.deleteShader(r),null)}createProgram(e,t,i){const r=e.createProgram();return e.attachShader(r,t),e.attachShader(r,i),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS)?r:(console.error(e.getProgramInfoLog(r)),e.deleteProgram(r),null)}initializeWebGL(){const e=this.gl,t=this.createShader(e,e.VERTEX_SHADER,this.vertexShaderSource),i=this.createShader(e,e.FRAGMENT_SHADER,this.fragmentShaderSource);this.program=this.createProgram(e,t,i),this.positionLocation=e.getAttribLocation(this.program,"a_position"),this.texCoordLocation=e.getAttribLocation(this.program,"a_texCoord"),this.resolutionLocation=e.getUniformLocation(this.program,"u_resolution"),this.positionBuffer=e.createBuffer(),this.texCoordBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.texCoordBuffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW)}updateCanvasSize(){const e=window.devicePixelRatio||1,t=this.clientWidth||300,i=this.clientHeight||300;this.canvas.width=t*e,this.canvas.height=i*e,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}render(){const e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,this.canvas.width,0,0,this.canvas.height,0,this.canvas.height,this.canvas.width,0,this.canvas.width,this.canvas.height]),e.STATIC_DRAW),e.useProgram(this.program),e.enableVertexAttribArray(this.positionLocation),e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(this.texCoordLocation),e.bindBuffer(e.ARRAY_BUFFER,this.texCoordBuffer),e.vertexAttribPointer(this.texCoordLocation,2,e.FLOAT,!1,0,0),e.uniform2f(this.resolutionLocation,e.canvas.width,e.canvas.height),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.texture),e.drawArrays(e.TRIANGLES,0,6)}connectedCallback(){new ResizeObserver((()=>{this.updateCanvasSize(),this.render()})).observe(this)}disconnectedCallback(){this.resizeObserver&&this.resizeObserver.disconnect()}}customElements.define("mm-alhambra",AlhambraTiled);