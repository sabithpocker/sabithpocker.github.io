class AlhambraTiled extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n          <canvas data-canvas></canvas>\n          <style>\n          :host {\n            display: grid;\n          }\n          canvas {\n            width: 100%;\n            min-height: 100%;\n          }\n          </style>",this.canvas=this.shadowRoot.querySelector("canvas"),this.gl=this.canvas.getContext("webgl2"),this.gl?(this.textureCanvas=document.createElement("canvas"),this.textureCanvas.width=512,this.textureCanvas.height=512,this.textureCtx=this.textureCanvas.getContext("2d"),this.initializeTexture(),this.initializeWebGL(),this.updateCanvasSize(),this.render()):console.error("WebGL2 not supported")}generateTilePattern(){const e=this.textureCtx,t=this.textureCanvas.width,r=this.textureCanvas.height,i=t/2,a=r/2;e.fillStyle="#1a1324",e.fillRect(0,0,t,r),e.strokeStyle="rgba(255, 255, 255, 0.3)",e.lineWidth=1,e.beginPath(),e.moveTo(0,0),e.lineTo(t,r),e.moveTo(t,0),e.lineTo(0,r),e.moveTo(i,0),e.lineTo(i,r),e.moveTo(0,a),e.lineTo(t,a);const o=Math.tan(22.5*Math.PI/180);Math.tan(67.5*Math.PI/180);e.moveTo(0,a-i*o),e.lineTo(t,a+i*o),e.moveTo(0,a+i*o),e.lineTo(t,a-i*o),e.moveTo(i-a*o,0),e.lineTo(i+a*o,r),e.moveTo(i+a*o,0),e.lineTo(i-a*o,r),e.stroke(),e.beginPath(),e.rect(0,0,t,r),e.stroke();const n=Math.min(t,r)/2;e.beginPath(),e.arc(i,a,n,0,2*Math.PI),e.stroke();const s=t*Math.sqrt(2)/2-n;e.beginPath(),e.arc(0,0,s,0,Math.PI/2),e.stroke(),e.beginPath(),e.arc(t,0,s,Math.PI/2,Math.PI),e.stroke(),e.beginPath(),e.arc(t,r,s,Math.PI,3*Math.PI/2),e.stroke(),e.beginPath(),e.arc(0,r,s,3*Math.PI/2,2*Math.PI),e.stroke()}initializeTexture(){this.generateTilePattern();const e=this.gl;this.texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.textureCanvas)}get vertexShaderSource(){return"#version 300 es\n        in vec4 a_position;\n        in vec2 a_texCoord;\n        uniform vec2 u_resolution;\n        out vec2 v_texCoord;\n        \n        void main() {\n            vec2 zeroToOne = a_position.xy / u_resolution;\n            vec2 clipSpace = (zeroToOne * 2.0 - 1.0) * vec2(1, -1);\n            gl_Position = vec4(clipSpace, 0, 1);\n            v_texCoord = a_texCoord;\n        }"}get fragmentShaderSource(){return"#version 300 es\n        precision highp float;\n        \n        in vec2 v_texCoord;\n        uniform sampler2D u_texture;\n        uniform vec2 u_resolution;\n        out vec4 outColor;\n        \n        void main() {\n            vec2 repeat = u_resolution / 512.0;  // 512 is texture size\n            vec2 texCoord = fract(v_texCoord * repeat);\n            outColor = texture(u_texture, texCoord);\n        }"}createShader(e,t,r){const i=e.createShader(t);return e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)?i:(console.error(e.getShaderInfoLog(i)),e.deleteShader(i),null)}createProgram(e,t,r){const i=e.createProgram();return e.attachShader(i,t),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS)?i:(console.error(e.getProgramInfoLog(i)),e.deleteProgram(i),null)}initializeWebGL(){const e=this.gl,t=this.createShader(e,e.VERTEX_SHADER,this.vertexShaderSource),r=this.createShader(e,e.FRAGMENT_SHADER,this.fragmentShaderSource);this.program=this.createProgram(e,t,r),this.positionLocation=e.getAttribLocation(this.program,"a_position"),this.texCoordLocation=e.getAttribLocation(this.program,"a_texCoord"),this.resolutionLocation=e.getUniformLocation(this.program,"u_resolution"),this.positionBuffer=e.createBuffer(),this.texCoordBuffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.texCoordBuffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW)}updateCanvasSize(){const e=window.devicePixelRatio||1,t=this.clientWidth||300,r=this.clientHeight||300;this.canvas.width=t*e,this.canvas.height=r*e,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}render(){const e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,this.canvas.width,0,0,this.canvas.height,0,this.canvas.height,this.canvas.width,0,this.canvas.width,this.canvas.height]),e.STATIC_DRAW),e.useProgram(this.program),e.enableVertexAttribArray(this.positionLocation),e.bindBuffer(e.ARRAY_BUFFER,this.positionBuffer),e.vertexAttribPointer(this.positionLocation,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(this.texCoordLocation),e.bindBuffer(e.ARRAY_BUFFER,this.texCoordBuffer),e.vertexAttribPointer(this.texCoordLocation,2,e.FLOAT,!1,0,0),e.uniform2f(this.resolutionLocation,e.canvas.width,e.canvas.height),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.texture),e.drawArrays(e.TRIANGLES,0,6)}connectedCallback(){new ResizeObserver((()=>{this.updateCanvasSize(),this.render()})).observe(this)}disconnectedCallback(){this.resizeObserver&&this.resizeObserver.disconnect()}}customElements.define("mm-alhambra",AlhambraTiled);