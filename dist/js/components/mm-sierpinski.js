class Sierpinski extends HTMLElement{constructor(){super(),this.simpleShader=null,this.vertexShaderSource="\n        attribute vec2 a_position;\n        varying vec4 v_color;\n        uniform vec2 u_resolution;\n       \n        void main() {\n          // convert the position from pixels to 0.0 to 1.0\n          vec2 zeroToOne = a_position / u_resolution;\n       \n          // convert from 0->1 to 0->2\n          vec2 zeroToTwo = zeroToOne * 2.0;\n       \n          // convert from 0->2 to -1->+1 (clipspace)\n          vec2 clipSpace = zeroToTwo - 1.0;\n       \n          gl_Position = vec4(clipSpace, 0, 1);\n      \n          v_color = vec4(0.5, 0.5, 0.5, 1);\n        }\n        ",this.fragmentShaderSource="\n        // fragment shaders don't have a default precision so we need\n        // to pick one. mediump is a good default\n        precision mediump float;\n        uniform vec4 u_color;\n        varying vec4 v_color;\n        void main() {\n          // gl_FragColor is a special variable a fragment shader\n          // is responsible for setting\n          gl_FragColor = v_color; // return redish-purple\n        }\n        ",this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML="\n        <canvas data-canvas></canvas>\n        <style>\n        :host {\n          display: grid;\n        }\n        canvas {\n          width: 100%;\n          min-height: 100%;\n        }\n        "}connectedCallback(){this.initializeWebGL(),this.drawSierpinski()}initializeWebGL(){const e=this.shadowRoot.querySelector("[data-canvas]");this.gl=e.getContext("webgl");const t=this.getProgram(this.gl,this.vertexShaderSource,this.fragmentShaderSource),i=this.gl.getAttribLocation(t,"a_position"),r=this.gl.getUniformLocation(t,"u_resolution"),o=this.gl.getUniformLocation(t,"u_color"),a=this.gl.createBuffer();this.simpleShader={program:t,positionAttributeLocation:i,resolutionUniformLocation:r,colorUniformLocation:o,positionBuffer:a},this.gl.useProgram(t),this.resize(this.gl.canvas),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.uniform2f(r,this.gl.canvas.width,this.gl.canvas.height),this.gl.uniform4f(o,.1,.2,.5,1),this.gl.enableVertexAttribArray(i),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,a)}drawSierpinski(){console.log("draw sierpinski");const e=this.gl.canvas.width,t=this.gl.canvas.height,i=Math.min(e,t)-100,r={x:e/2,y:Math.sqrt(3)/2*i/2},o=this.getEquilateralPoints(r,i);this.getChildTrianglePoints(o,5).forEach(e=>this.drawTriangle(this.simpleShader,...e))}getProgram(){const e=this.createShader(this.gl,this.gl.VERTEX_SHADER,this.vertexShaderSource),t=this.createShader(this.gl,this.gl.FRAGMENT_SHADER,this.fragmentShaderSource);return this.createProgram(this.gl,e,t)}createShader(e,t,i){const r=e.createShader(t);if(e.shaderSource(r,i),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;e.deleteShader(r)}clearCanvas(e=[0,0,0,0],t){t.clearColor(...e),t.clear(t.COLOR_BUFFER_BIT)}resize(e){const t=window.devicePixelRatio||1,i=Math.floor(e.clientWidth*t),r=Math.floor(e.clientHeight*t);e.width===i&&e.height===r||(e.width=i,e.height=r)}createProgram(e,t,i){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,i),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;console.log(e.getProgramInfoLog(r)),e.deleteProgram(r)}getEquilateralPoints(e,t){return[e.x,e.y+Math.sqrt(3)/3*t,e.x-t/2,e.y-Math.sqrt(3)/6*t,e.x+t/2,e.y-Math.sqrt(3)/6*t]}getChildTrianglePoints(e,t=0){if(0===t)return[[e[0],e[1],(e[0]+e[2])/2,(e[1]+e[3])/2,(e[0]+e[4])/2,(e[1]+e[5])/2],[e[2],e[3],(e[0]+e[2])/2,(e[1]+e[3])/2,(e[2]+e[4])/2,(e[3]+e[5])/2],[e[4],e[5],(e[0]+e[4])/2,(e[1]+e[5])/2,(e[2]+e[4])/2,(e[3]+e[5])/2]];return[...this.getChildTrianglePoints(e,t-1)].reduce((e,t)=>[...e,...this.getChildTrianglePoints(t)],[])}drawTriangle(e,t,i,r,o,a,n){this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([t,i,r,o,a,n]),this.gl.STATIC_DRAW);const s=this.gl.FLOAT;this.gl.vertexAttribPointer(e.positionAttributeLocation,2,s,!1,0,0),this.renderTriangle(this.gl)}renderTriangle(e){var t=e.TRIANGLES;e.drawArrays(t,0,3)}}customElements.define("mm-sierpinski",Sierpinski);