const fragmentShader2="#version 300 es\nprecision highp float;\n\nin vec2 v_fragCoord;\nuniform vec2 u_resolution;\nuniform float u_time;\nout vec4 outColor;\n\nvec3 palette(float t) {\n    vec3 a = vec3(1.0, 0.2, 0.2);  // pastel pink\n    vec3 b = vec3(0.68, 0.85, 0.9); // pastel blue\n    vec3 c = vec3(1.0, 1.0, 1.0);   // pastel green\n    vec3 d = vec3(1.0,1.0,1.0);   // pastel purple\n    \n    return a + b * cos(.031428318 * (c * t + d));\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 perturb(vec2 p, float scale) {\n    float angle = rand(p) * 6.28318;\n    return vec2(cos(angle), sin(angle)) * scale;\n}\n\nvec2 reactionDiffusion(vec2 uv) {\n    float dA = 1.0;\n    float dB = 0.5;\n    float feed = 0.055;\n    float kill = 0.062;\n\n    vec2 center = vec2(0.5);\n    vec2 p = uv * 2.0 - 1.0;\n\n    float dist = length(p);\n    float m = smoothstep(0.0, 0.1, dist);\n    float n = 1.0 - smoothstep(0.4, 0.5, dist);\n\n    float t = u_time * 0.1;\n    vec2 noise = perturb(uv + t, 0.02) * 0.005;\n    \n    vec2 val = vec2(m, n);\n    vec2 diffusion = vec2(dA, dB) * (val - uv);\n\n    vec2 reaction = vec2(\n        uv.x * uv.y * uv.y - feed * (1.0 - uv.x),\n        -uv.x * uv.y * uv.y + (feed + kill) * uv.y\n    );\n\n    return val + diffusion + reaction;\n}\n\nvoid main() {\n    vec2 uv = (v_fragCoord * 2.0 - u_resolution.xy) / u_resolution.y;\n    // uv = reactionDiffusion(uv) * 2.;\n    vec3 col = palette(u_time);\n    vec3 finalColor = col * vec3(0.7);\n\n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 2. + i / 5.0) - 0.5;\n        float len_uv = length(uv);\n        float sin_val = cos(tan(len_uv * 3.14 + u_time/10.));\n        float d = 0.001 / abs(sin_val / 30.0);\n        finalColor += col * d;\n    }\n\n    outColor = vec4(finalColor, 1.0);\n}";export default fragmentShader2;