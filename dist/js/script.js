import{MnistData}from"./data.js";async function showExamples(a){const t=tfvis.visor().surface({name:"Input Data Examples",tab:"Input Data"}),e=a.nextTestBatch(200),s=e.xs.shape[0];for(let a=0;a<s;a++){const s=tf.tidy((()=>e.xs.slice([a,0],[1,e.xs.shape[1]]).reshape([28,28,1]))),i=document.createElement("canvas");i.width=28,i.height=28,i.style="margin: 4px;",await tf.browser.toPixels(s,i),t.drawArea.appendChild(i),s.dispose()}}async function run(){const a=new MnistData;await a.load(),await showExamples(a);const t=getModel();tfvis.show.modelSummary({name:"Model Architecture",tab:"Model"},t),await train(t,a),await showAccuracy(t,a),await showConfusion(t,a)}function getModel(){const a=tf.sequential();a.add(tf.layers.conv2d({inputShape:[28,28,1],kernelSize:5,filters:8,strides:1,activation:"relu",kernelInitializer:"varianceScaling"})),a.add(tf.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),a.add(tf.layers.conv2d({kernelSize:5,filters:16,strides:1,activation:"relu",kernelInitializer:"varianceScaling"})),a.add(tf.layers.maxPooling2d({poolSize:[2,2],strides:[2,2]})),a.add(tf.layers.flatten());a.add(tf.layers.dense({units:10,kernelInitializer:"varianceScaling",activation:"softmax"}));const t=tf.train.adam();return a.compile({optimizer:t,loss:"categoricalCrossentropy",metrics:["accuracy"]}),a}async function train(a,t){const e=tfvis.show.fitCallbacks({name:"Model Training",tab:"Model",styles:{height:"1000px"}},["loss","val_loss","acc","val_acc"]),[s,i]=tf.tidy((()=>{const a=t.nextTrainBatch(5500);return[a.xs.reshape([5500,28,28,1]),a.labels]})),[n,o]=tf.tidy((()=>{const a=t.nextTestBatch(1e3);return[a.xs.reshape([1e3,28,28,1]),a.labels]}));return a.fit(s,i,{batchSize:512,validationData:[n,o],epochs:10,shuffle:!0,callbacks:e})}const classNames=["Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"];function doPrediction(a,t,e=500){const s=t.nextTestBatch(e),i=s.xs.reshape([e,28,28,1]),n=s.labels.argMax(-1),o=a.predict(i).argMax(-1);return i.dispose(),[o,n]}async function showAccuracy(a,t){const[e,s]=doPrediction(a,t),i=await tfvis.metrics.perClassAccuracy(s,e);tfvis.show.perClassAccuracy({name:"Accuracy",tab:"Evaluation"},i,classNames),s.dispose()}async function showConfusion(a,t){const[e,s]=doPrediction(a,t),i=await tfvis.metrics.confusionMatrix(s,e);tfvis.render.confusionMatrix({name:"Confusion Matrix",tab:"Evaluation"},{values:i,tickLabels:classNames}),s.dispose()}document.addEventListener("DOMContentLoaded",run);